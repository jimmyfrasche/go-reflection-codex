Assignment
Any kind, Primitive types

==
	a = b
==
For a, b of reflect.Value

	a.Set(b)

To make sure this operation won't panic, use Value.CanSet

	if a.CanSet() {
		a.Set(b)
	}

In addition to the generic Value.Set there are a number of type specific helper methods
on Value for primitive types and byte slices. Make sure that the type of a is
the appropriate type before calling.

	//bool
	a.SetBool(true)

	//byte slice
	a.SetBytes([]byte{})

	//string
	a.SetString("π≈3.1415")

For the numeric types int, uint, float64, complex64, byte, int8, int16, etc, there are
methods on reflect.Value—Value.SetComplex, Value.SetFloat, Value.SetInt,
Value.SetUint— to set the largest of each category of numeric types; namely,
int64, uint64, float64, and complex128.

	a.SetComplex(1.3+2i)

	a.SetFloat(3.14)

	a.SetInt(-1)

	a.SetUint(0)

If the reflect.Value isn't an int64, uint64, float64, or complex128, it's possible
that the value being assigned will not fit. For example, assigning 65 000 to an int8.

To handle this possibility there are Value.OverlfowComplex, Value.OverflowFloat,
Value.OverflowInt, and Value.OverflowUint. In the following assume that b is an arbitrary value of the appropriate type

	if a.CanSet() && !a.OverflowComplex(b) {
		a.SetComplex(b)
	}

	if a.CanSet() && !a.OverflowFloat(b) {
		a.SetFloat(b)
	}

	if a.CanSet() && !a.OverflowInt(b) {
		a.SetInt(b)
	}

	if a.CanSet() && !a.OverflowUint(b) {
		a.SetUint(b)
	}

