Type assert
Interface
===
	if v, ok := SomeInterface.(ConcreteType); ok {
		...
	}
===
If you have a reflect.Type, T, of a noninterface type to check against, you can
use Value.Elem like so
	if SomeReflected.Elem().Type() == T {
		...
	}
Value.Elem will panic if SomeReflected is not an interface (or a pointer) and
will return the zero value of Elem().Type() if SomeReflected is nil.

Another tact is calling Value.Interface on a reflect.Value returns the unreflected value as an
interface{}.

	if v, ok := SomeReflected.Interface().(ConcreteType); ok {
		...
	}

Value.Interface can panic if the reflect.Value is invalid or the value is
an unexported read only field.

Value.CanInterface allows you to check if the call is safe
	if SomeReflected.CanInterface() {
		if v, ok := SomeReflected.Interface().(ConcreteType) {
			...
		}
	}

